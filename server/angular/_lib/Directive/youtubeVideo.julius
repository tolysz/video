function (youtubeEmbedUtils, $window) {
    var uniqId = 1;

    // from YT.PlayerState
    var stateNames = {
        '-1': 'unstarted',
        0: 'ended',
        1: 'playing',
        2: 'paused',
        3: 'buffering',
        5: 'queued'
    };

    var eventPrefix = 'youtube.player.';

    return {
        restrict: 'EA',
        scope: {
            videoId: '=?',
            videoUrl: '=?',
            player: '=?',
            playerVars: '=?',
            playerHeight: '=?',
            playerWidth: '=?'
        },
        link: function (scope, element, attrs) {
            // allows us to $watch `ready`
            var win = angular.element($window);
            scope.utils = youtubeEmbedUtils;

            // player-id attr > id attr > directive-generated ID
            var playerId = attrs.playerId || element[0].id || 'unique-youtube-embed-id-' + uniqId++;
            element[0].id = playerId;

            scope.$watch(function() {
               return { 'h': $window.window.innerHeight
                      , 'w': $window.window.innerWidth
                      }
                }
                , function (newValue, oldValue) {

                    var ndimm = youtubeEmbedUtils.calculateDims(newValue)

                    scope.playerHeight = ndimm.h || 390; // scope.playerHeight
                    scope.playerWidth = ndimm.w || 640; // scope.playerWidth

                    if (scope.player) {
                        scope.player.setSize(ndimm.w + 'px',ndimm.h + 'px')
                    }

                    scope.style = function () {
                        return { 'height': ndimm.h
                            , 'width':  ndimm.w
                        };
                    };

                }, true);

            scope.playerVars = scope.playerVars || {};

            // YT calls callbacks outside of digest cycle
            function applyBroadcast () {
                var args = Array.prototype.slice.call(arguments);
                scope.$apply(function () {
                    scope.$emit.apply(scope, args);
                });
            }

            function onPlayerStateChange (event) {
                var state = stateNames[event.data];
                if (typeof state !== 'undefined') {
                    applyBroadcast(eventPrefix + state, scope.player, event);
                }
                scope.$apply(function () {
                    scope.player.currentState = state;
                });
            }

            function onPlayerReady (event) {
                applyBroadcast(eventPrefix + 'ready', scope.player, event);
            }

            function createPlayer () {
                var playerVars = angular.copy(scope.playerVars);
                playerVars.start = playerVars.start || scope.urlStartTime;
                var player = new YT.Player(playerId
                     , { height:     scope.playerHeight
                       , width:      scope.playerWidth
                       , videoId:    playerVars.videoId
                       , playerVars: playerVars
                       , events: { onReady: onPlayerReady
                                 , onStateChange: onPlayerStateChange
                                 }
                       });

                player.id = playerId;
                return player;
            }

            function loadPlayer () {
                if (scope.playerVars.videoId || scope.playerVars.list) {
                    if (scope.player && scope.player.destroy &&
                        typeof scope.player.destroy === 'function') {
                        scope.player.destroy();
                    }

                    scope.player = createPlayer();
                }
            }

            var stopWatchingReady = scope.$watch(
                function () {
                    return scope.utils.ready && (
                        // Wait until one of them is defined...
                        typeof scope.playerVars.videoId !== 'undefined'
                        ||  typeof scope.playerVars.list !== 'undefined');
                },
                function (ready) {
                    if (ready) {
                        stopWatchingReady();
                        
                        // then, a video ID

                        if (typeof scope.playerVars.videoId !== 'undefined') {
                            scope.$watch('playerVars.videoId', function () {
                                scope.urlStartTime = null;
                                loadPlayer();
                            });
                        }else {
                            scope.$watch('playerVars.list', function () {
                                scope.urlStartTime = null;
                                loadPlayer();
                            });
                        }
                    }
            });

            win.bind('resize', function () {
                scope.$apply();
            });

            scope.$on('$destroy', function () {
                scope.player && scope.player.destroy();
            });
        }
    };
}